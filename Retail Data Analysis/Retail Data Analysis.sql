CREATE DATABASE RETAILS;
USE RETAILS;

USE SCHEMA PUBLIC;

CREATE OR REPLACE TABLE DEMOGRAPHIC_RAW(
  AGE_DESC CHAR(20),
  MARITIAL_STATUS_CODE VARCHAR(5),
  INCOME_DESC VARCHAR(40),
  HOMEOWNER_DESC VARCHAR(40),
  HH_COMP_DESC VARCHAR(50),
  HOUSEHOLD_SIZE_DESC VARCHAR(50),
  KID_CATEGORY_DESC VARCHAR(50),
  HOUSEHOLD_KEY INT PRIMARY KEY
);

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW(
  DESCRIPTION CHAR(10),
  CAMPAIGN INT,
  START_DAY INT,
  END_DAY INT,
  PRIMARY KEY (DESCRIPTION),
  UNIQUE (CAMPAIGN)
);

CREATE OR REPLACE TABLE CAMPAIGN_RAW(
  DESCRIPTION CHAR(10),
  HOUSEHOLD_KEY INT,
  CAMPAIGN INT,
  FOREIGN KEY (DESCRIPTION) REFERENCES CAMPAIGN_DESC_RAW(DESCRIPTION),
  FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN),
  FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY)
);

CREATE OR REPLACE TABLE PRODUCT_RAW(
  PRODUCT_ID INT PRIMARY KEY,
  MANUFACTURER INT,
  DEPARTMENT VARCHAR(50),
  BRAND VARCHAR(50),
  COMMODITY_DESC VARCHAR(65),
  SUB_COMMODITY_DESC VARCHAR(65),
  CURR_SIZE_OF_PRODUCT VARCHAR(15)
);

CREATE OR REPLACE TABLE COUPON_RAW(
  COUPON_UPC INT,
  PRODUCT_ID INT,
  CAMPAIGN INT, 
  FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT_RAW(PRODUCT_ID),
  FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

------------------------------------------------------------------------------------
CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::305486080261:role/retaildarole'
STORAGE_ALLOWED_LOCATIONS =('s3://retaildaproj');

DESC integration s3_int;

CREATE OR REPLACE FILE FORMAT CSV 
TYPE = 'CSV' 
COMPRESSION = 'AUTO' 
FIELD_DELIMITER = ',' 
RECORD_DELIMITER = '\n' 
SKIP_HEADER = 1;


CREATE OR REPLACE STAGE RETAIL
URL ='s3://retaildaproj'
file_format = CSV
storage_integration = s3_int;

LIST @RETAIL;

SHOW STAGES;

------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PIPE RETAIL_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_DESC_RAW" --yourdatabase -- your schema ---your table
FROM '@RETAIL/CAMPAIGN_DESC/' --s3 bucket subfolde4r name
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAIL/CAMPAIGN/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_RAW"
FROM '@RETAIL/COUPON/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_COUPON_REDEMPT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_REDEMPT_RAW"
FROM '@RETAIL/COUPON_REDEMPT/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."DEMOGRAPHIC_RAW"
FROM '@RETAIL/DEMOGRAPHIC/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAIL/PRODUCT/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_TRANSACTION AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAIL/TRANSACTION/'
FILE_FORMAT = CSV;


SHOW PIPES;

------------------------------------------------------------------------------------------------------------------------------------------------

ALTER PIPE RETAIL_DEMOGRAPHIC REFRESH;
ALTER PIPE RETAIL_TRANSACTION REFRESH;
ALTER PIPE RETAIL_CAMPAIGN_DESC REFRESH;--
ALTER PIPE RETAIL_CAMPAIGN REFRESH;
ALTER PIPE RETAIL_COUPON REFRESH;
ALTER PIPE RETAIL_COUPON_REDEMPT REFRESH;
ALTER PIPE RETAIL_PRODUCT REFRESH;

select SYSTEM$PIPE_STATUS('RETAIL_DEMOGRAPHIC'); 

select SYSTEM$PIPE_STATUS('RETAIL_TRANSACTION');

select SYSTEM$PIPE_STATUS('RETAIL_CAMPAIGN_DESC');

select DISTINCT COUNT(*) from PRODUCT_RAW;

select COUNT(*) from TRANSACTION_RAW;

select * from RETAILS.PUBLIC.CAMPAIGN_DESC_RAW;
select * from RETAILS.PUBLIC.CAMPAIGN_RAW;
select * from RETAILS.PUBLIC.COUPON_RAW;
select * from RETAILS.PUBLIC.COUPON_REDEMPT_RAW;
select * from RETAILS.PUBLIC.COUPON_REDEMPT_NEW;
select * from RETAILS.PUBLIC.DEMOGRAPHIC_RAW;
select * from RETAILS.PUBLIC.PRODUCT_RAW;
select * from RETAILS.PUBLIC.TRANSACTION_NEW;

-- drop table RETAILS.PUBLIC.CAMPAIGN_DESC_NEW;
-- drop table RETAILS.PUBLIC.COUPON_REDEMPT_NEW;
-- drop table RETAILS.PUBLIC.TRANSACTION_NEW;
------------------------------------------------------------------------------------------------------------------------------------------------

-- Customer Demographics KPIs:
SELECT * FROM DEMOGRAPHIC_RAW;

SELECT MARITIAL_STATUS_CODE, HH_COMP_DESC, COUNT(1) AS CNT
FROM DEMOGRAPHIC_RAW
GROUP BY 1,2
ORDER BY 3;

SELECT AGE_DESC, MARITIAL_STATUS_CODE, COUNT(1) AS CNT
FROM DEMOGRAPHIC_RAW
GROUP BY 1,2
ORDER BY 1,2;

SELECT DISTINCT HOMEOWNER_DESC
FROM DEMOGRAPHIC_RAW;

UPDATE DEMOGRAPHIC_RAW 
SET HOMEOWNER_DESC = 'Others' WHERE HOMEOWNER_DESC = 'Unknown';

SELECT DISTINCT HH_COMP_DESC
FROM DEMOGRAPHIC_RAW;

UPDATE DEMOGRAPHIC_RAW 
SET HH_COMP_DESC = 'No Kids' WHERE HH_COMP_DESC = 'Unknown';

SELECT DISTINCT HH_COMP_DESC
FROM DEMOGRAPHIC_RAW;

-- Count of unique households: Measure the total number of unique households in the Demographic table.
SELECT COUNT(DISTINCT household_key) AS unique_households
FROM DEMOGRAPHIC_RAW;

-- Household composition distribution: Analyze the distribution of household compositions to understand the composition of households.
SELECT HH_COMP_DESC, COUNT(*) AS household_count
FROM DEMOGRAPHIC_RAW
GROUP BY HH_COMP_DESC
ORDER BY household_count DESC;

-- Age distribution: Calculate the percentage or count of customers in different age groups (AGE_DESC).
SELECT AGE_DESC, COUNT(*) AS NO_OF_PEOPLE
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT SUM(X.NO_OF_PEOPLE) FROM (SELECT AGE_DESC, COUNT(*) AS NO_OF_PEOPLE
FROM DEMOGRAPHIC_RAW
GROUP BY 1) AS X;

SELECT AGE_DESC, COUNT(*) AS NO_OF_PEOPLE, ROUND(COUNT(*)/(SELECT COUNT(DISTINCT household_key) AS unique_households FROM DEMOGRAPHIC_RAW)*100,2) AS PERCENTAGE
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- Marital status distribution: Analyze the proportion of customers in different marital status categories (MARITAL_STATUS_CODE).
SELECT MARITIAL_STATUS_CODE, COUNT(*) AS NO_OF_PEOPLE, ROUND(COUNT(*)/(SELECT COUNT(DISTINCT household_key) AS unique_households FROM DEMOGRAPHIC_RAW)*100,2) AS PERCENTAGE
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- Income distribution: Determine the distribution of customers across income levels (INCOME_DESC).
SELECT INCOME_DESC, COUNT(*) AS NO_OF_PEOPLE, ROUND(COUNT(*)/(SELECT COUNT(DISTINCT household_key) AS unique_households FROM DEMOGRAPHIC_RAW)*100,2) AS PERCENTAGE
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- Homeownership distribution: Calculate the percentage or count of customers who own or rent their homes (HOMEOWNER_DESC).
SELECT HOMEOWNER_DESC, COUNT(*) AS NO_OF_PEOPLE, ROUND(COUNT(*)/(SELECT COUNT(DISTINCT household_key) AS unique_households FROM DEMOGRAPHIC_RAW)*100,2) AS PERCENTAGE
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;


-- Campaign KPIs:
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM CAMPAIGN_DESC_NEW;

-- Number of campaigns: Count the total number of campaigns in the Campaign table.
SELECT COUNT(DISTINCT CAMPAIGN) AS NO_OF_CAMPAIGN
FROM CAMPAIGN_RAW;

-- Campaign duration: Calculate the duration of each campaign by subtracting the start day from the end day (in the Campaign_desc table).
SELECT * FROM CAMPAIGN_DESC_NEW;

SELECT DESCRIPTION, CAMPAIGN, CAMPAIGN_DURATION
FROM CAMPAIGN_DESC_NEW;

SELECT DESCRIPTION, COUNT(CAMPAIGN) AS NO_OF_CAMPAIGN
FROM CAMPAIGN_DESC_NEW
GROUP BY 1
ORDER BY 1;

SELECT DESCRIPTION, COUNT(CAMPAIGN) AS NO_OF_CAMPAIGN, SUM(CAMPAIGN_DURATION) AS TOTAL_DURATION
FROM CAMPAIGN_DESC_NEW
GROUP BY 1
ORDER BY 1;

SELECT CR.DESCRIPTION, CR.CAMPAIGN, CD.END_DATE - CD.START_DATE AS DURATION
FROM CAMPAIGN_DESC_NEW CD
JOIN CAMPAIGN_RAW CR ON CD.CAMPAIGN = CR.CAMPAIGN;

-- Campaign effectiveness: Analyze the number of households associated with each campaign (in the Campaign table) to measure campaign reach.
SELECT *
FROM DEMOGRAPHIC_RAW DR
JOIN CAMPAIGN_RAW CR ON CR.HOUSEHOLD_KEY = DR.HOUSEHOLD_KEY
JOIN CAMPAIGN_DESC_NEW CN ON CN.CAMPAIGN = CR.CAMPAIGN;

SELECT CR.CAMPAIGN, COUNT(DR.HOUSEHOLD_KEY) AS NO_OF_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW DR
JOIN CAMPAIGN_RAW CR ON CR.HOUSEHOLD_KEY = DR.HOUSEHOLD_KEY
GROUP BY 1
ORDER BY 1;

SELECT CR.CAMPAIGN, DR.HOMEOWNER_DESC, CN.CAMPAIGN_DURATION, COUNT(DR.HOUSEHOLD_KEY) AS NO_OF_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW DR
JOIN CAMPAIGN_RAW CR ON CR.HOUSEHOLD_KEY = DR.HOUSEHOLD_KEY
JOIN CAMPAIGN_DESC_NEW CN ON CN.CAMPAIGN = CR.CAMPAIGN
GROUP BY 1,2,3
ORDER BY 1,2,3;


-- Coupon KPIs:
SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPT_NEW;

-- Coupon redemption rate: Calculate the percentage of coupons redeemed (from the coupon_redempt table) compared to the total number of coupons distributed (from the Coupon table).
SELECT
ROUND(((SELECT COUNT(DISTINCT COUPON_UPC) FROM COUPON_REDEMPT_NEW)*100.0)/(SELECT COUNT(DISTINCT COUPON_UPC) FROM COUPON_RAW),2) AS COUPON_REDEMPTION_RATE;

-- Coupon usage by campaign: Measure the number of coupon redemptions (from the coupon_redempt table) for each campaign (in the Coupon table).
SELECT 
    COUNT(DISTINCT CR.COUPON_UPC) AS NO_OF_COUPONS,COUNT(DISTINCT CN.COUPON_UPC) AS COUPONS_REDEEMED,
    ROUND(((SELECT COUNT(DISTINCT COUPON_UPC) FROM COUPON_REDEMPT_NEW)*100.0)/(SELECT COUNT(DISTINCT COUPON_UPC) FROM COUPON_RAW),2) AS COUPON_REDEMPTION_RATE
FROM COUPON_RAW CR
LEFT JOIN COUPON_REDEMPT_NEW CN ON CR.COUPON_UPC = CN.COUPON_UPC;


-- Product KPIs:
SELECT * FROM TRANSACTION_NEW;
SELECT * FROM PRODUCT_RAW;

-- Sales value: Calculate the total sales value for each product (in the Transaction_data table) to identify top-selling products.
SELECT PR.COMMODITY_DESC, SUM(QUANTITY*SALES_VALUE) AS SALES_VALUE
FROM TRANSACTION_NEW TN 
JOIN PRODUCT_RAW PR ON TN.PRODUCT_ID = PR.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

-- Manufacturer distribution: Analyze the distribution of products across different manufacturers (in the Product table).
SELECT COUNT(DISTINCT MANUFACTURER)
FROM PRODUCT_RAW;

SELECT MANUFACTURER, COUNT(PRODUCT_ID) AS NO_OF_PRODUCTS
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 1;

-- Department-wise sales: Measure the sales value by department (in the Product table) to understand which departments contribute most to revenue.
SELECT DEPARTMENT, SUM(QUANTITY*SALES_VALUE) AS SALES_VALUE
FROM TRANSACTION_NEW TN 
JOIN PRODUCT_RAW PR ON TN.PRODUCT_ID = PR.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

-- Brand-wise sales: Calculate the sales value for each brand (in the Product table) to identify top-selling brands.
SELECT PR.BRAND, SUM(QUANTITY*SALES_VALUE) AS SALES_VALUE
FROM TRANSACTION_NEW TN 
JOIN PRODUCT_RAW PR ON TN.PRODUCT_ID = PR.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

SELECT PR.BRAND, PR.COMMODITY_DESC, SUM(QUANTITY*SALES_VALUE) AS SALES_VALUE
FROM TRANSACTION_NEW TN 
JOIN PRODUCT_RAW PR ON TN.PRODUCT_ID = PR.PRODUCT_ID
GROUP BY 1,2
ORDER BY 3 DESC, 1;


-- Transaction KPIs:
SELECT * FROM TRANSACTION_NEW;

SELECT DISTINCT TRANS_TIME  
FROM TRANSACTION_NEW
WHERE TRANSACTION_HOUR > 24;

SELECT DISTINCT TRANS_TIME,
CASE 
    WHEN LENGTH(TRANS_TIME) = 2 THEN CONCAT('00',':', RIGHT(TRANS_TIME,2))
    WHEN LENGTH(TRANS_TIME) = 3 THEN CONCAT(LEFT(TRANS_TIME,1),':', RIGHT(TRANS_TIME,2))
    ELSE CONCAT(LEFT(TRANS_TIME,2),':', RIGHT(TRANS_TIME,2)) END AS TRANSACTION_TIMING
FROM TRANSACTION_NEW;

ALTER TABLE TRANSACTION_NEW 
ADD COLUMN TRANSACTION_TIME VARCHAR(10);

ALTER TABLE TRANSACTION_NEW 
DROP COLUMN TRANSACTION_TIME;

UPDATE TRANSACTION_NEW 
SET TRANSACTION_TIME = CASE 
    WHEN LENGTH(TRANS_TIME) = 2 THEN CONCAT('00',':', RIGHT(TRANS_TIME,2))
    WHEN LENGTH(TRANS_TIME) = 3 THEN CONCAT(LEFT(TRANS_TIME,1),':', RIGHT(TRANS_TIME,2))
    ELSE CONCAT(LEFT(TRANS_TIME,2),':', RIGHT(TRANS_TIME,2)) END;

ALTER TABLE TRANSACTION_NEW 
ADD COLUMN TRANSACTION_HOUR INT;

ALTER TABLE TRANSACTION_NEW 
DROP COLUMN TRANSACTION_HOUR;

UPDATE TRANSACTION_NEW 
SET TRANSACTION_HOUR = CASE 
    WHEN LENGTH(TRANS_TIME) = 3 OR LENGTH(TRANS_TIME) = 2 THEN LEFT(TRANS_TIME,1)
    ELSE LEFT(TRANS_TIME,2) END;

SELECT DISTINCT TRANSACTION_HOUR
FROM TRANSACTION_NEW;

-- Total sales value: Calculate the sum of sales values (in the Transaction_data table) to measure overall revenue.
SELECT SUM(QUANTITY*SALES_VALUE) AS TOTAL_REVENUE
FROM TRANSACTION_NEW;

-- Average transaction value: Calculate the average sales value per transaction to understand customer spending patterns.
SELECT ROUND(AVG(TOTAL_REVENUE),2) AVG_REVENUE FROM (
SELECT BASKET_ID, SUM(QUANTITY * SALES_VALUE) AS TOTAL_REVENUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 1) SQUERY;

SELECT DISTINCT EXTRACT(MONTH FROM DATE) FROM TRANSACTION_NEW;

SELECT EXTRACT(MONTH FROM DATE) AS MONTH, ROUND(AVG(QUANTITY * SALES_VALUE),2) AS AVG_REVENUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

SELECT EXTRACT(DAY FROM DATE) AS DAY, ROUND(AVG(QUANTITY * SALES_VALUE),2) AS AVG_REVENUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- Quantity sold: Measure the total quantity sold (in the Transaction_data table) to understand product demand.
SELECT PRODUCT_ID, COUNT(QUANTITY) AS QUANTITY_SOLD
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;

-- Discounts: Analyze the amount and impact of discounts (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) on sales value.
SELECT DISTINCT COUPON_MATCH_DISC
FROM TRANSACTION_NEW;

SELECT
    SUM(QUANTITY * SALES_VALUE) AS TOTAL_REVENUE,
    SUM((QUANTITY * SALES_VALUE) - (-(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC))) AS TOTAL_AFTER_DISCOUNT,
    SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOTAL_DISCOUNT
FROM TRANSACTION_NEW;

SELECT 
    PR.PRODUCT_ID,
    SUM(TN.QUANTITY * TN.SALES_VALUE) AS TOTAL_REVENUE,
    SUM((TN.QUANTITY * TN.SALES_VALUE) - TN.RETAIL_DISC - TN.COUPON_DISC - TN.COUPON_MATCH_DISC) AS TOTAL_AFTER_DISCOUNT,
    SUM(TN.RETAIL_DISC + TN.COUPON_DISC + TN.COUPON_MATCH_DISC) AS TOTAL_DISCOUNT
FROM TRANSACTION_NEW TN
JOIN PRODUCT_RAW PR ON PR.PRODUCT_ID = TN.PRODUCT_ID
GROUP BY 1
ORDER BY 1;